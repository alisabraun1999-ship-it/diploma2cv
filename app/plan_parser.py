# app/plan_parser.py
import pandas as pd
import json
import os
import re
from typing import Dict, List, Any
from pathlib import Path

def parse_single_curriculum(file_path: str) -> Dict[str, Any]:
    """
    –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –¥–ª—è –≤–∞—à–µ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
    """
    try:
        print(f"\n{'='*60}")
        print(f"üîç –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª: {os.path.basename(file_path)}")
        
        excel_file = pd.ExcelFile(file_path)
        sheet_names = excel_file.sheet_names
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏–∑ –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏(2)
        competences_dict = {}
        if '–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏(2)' in sheet_names:
            try:
                comp_df = pd.read_excel(file_path, sheet_name='–ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏(2)', header=None)
                print(f"üìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {comp_df.shape}")
                
                for index, row in comp_df.iterrows():
                    if row.isna().all():
                        continue
                    
                    # –ò—â–µ–º —Å—Ç—Ä–æ–∫–∏ —Å –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏ (–Ω–∞—á–∏–Ω–∞—é—Ç—Å—è —Å –ë1.–û.XX)
                    disc_code = ""
                    disc_competences = []
                    
                    for i, cell in enumerate(row):
                        if pd.notna(cell):
                            cell_str = str(cell).strip()
                            
                            # –ö–æ–¥ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ë1.–û.01)
                            if cell_str.startswith('–ë1.–û.') and len(cell_str) >= 7:
                                disc_code = cell_str
                            
                            # –ö–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ (—Å–æ–¥–µ—Ä–∂–∞—Ç –£–ö- –∏–ª–∏ –û–ü–ö- –∏–ª–∏ –ü–ö-)
                            elif '–£–ö-' in cell_str or '–û–ü–ö-' in cell_str or '–ü–ö-' in cell_str:
                                # –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                comp_matches = re.findall(r'(–£–ö-\d+|–û–ü–ö-\d+|–ü–ö-\d+)', cell_str)
                                disc_competences.extend(comp_matches)
                    
                    if disc_code and disc_competences:
                        competences_dict[disc_code] = disc_competences
                        print(f"‚úÖ {disc_code} ‚Üí {disc_competences}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–π: {e}")
        
        # –ü–∞—Ä—Å–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –∏–∑ –ª–∏—Å—Ç–∞ –ü–ª–∞–Ω
        disciplines_list = []
        if '–ü–ª–∞–Ω' in sheet_names:
            try:
                plan_df = pd.read_excel(file_path, sheet_name='–ü–ª–∞–Ω', header=None)
                print(f"üìè –†–∞–∑–º–µ—Ä –ª–∏—Å—Ç–∞ –ø–ª–∞–Ω–∞: {plan_df.shape}")
                
                # –ù–∞—Ö–æ–¥–∏–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ - —Å—Ç—Ä–æ–∫–∞ 2 —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
                header_row = 2
                header_cells = plan_df.iloc[header_row]
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–µ–∫—Å—ã —Å—Ç–æ–ª–±—Ü–æ–≤
                code_col = None
                name_col = None
                credits_col = None
                
                for j, cell in enumerate(header_cells):
                    if pd.notna(cell):
                        cell_str = str(cell).lower()
                        if any(keyword in cell_str for keyword in ['–∏–Ω–¥–µ–∫—Å', '–∫–æ–¥']):
                            code_col = j
                        elif any(keyword in cell_str for keyword in ['–Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω', '–Ω–∞–∑–≤–∞–Ω']):
                            name_col = j
                        elif any(keyword in cell_str for keyword in ['–∑.–µ.', '–∫—Ä–µ–¥–∏—Ç', '–∑–∞—á–µ—Ç']):
                            credits_col = j
                
                print(f"üéØ –°—Ç–æ–ª–±—Ü—ã: –∫–æ–¥={code_col}, –Ω–∞–∑–≤–∞–Ω–∏–µ={name_col}, –∫—Ä–µ–¥–∏—Ç—ã={credits_col}")
                
                # –ü–∞—Ä—Å–∏–º –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–∞—á–∏–Ω–∞—è —Å–æ —Å—Ç—Ä–æ–∫–∏ 3
                for i in range(3, len(plan_df)):
                    row = plan_df.iloc[i]
                    
                    if row.isna().all():
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                    disc_code = str(row[code_col]).strip() if code_col is not None and pd.notna(row[code_col]) else ""
                    disc_name = str(row[name_col]).strip() if name_col is not None and pd.notna(row[name_col]) else ""
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å—Ç—Ä–æ–∫–∏
                    if (not disc_code or not disc_name or
                        any(keyword in disc_code.lower() for keyword in ['–±–ª–æ–∫', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '—Ä–∞–∑–¥–µ–ª', '—á–∞—Å—Ç—å']) or
                        any(keyword in disc_name.lower() for keyword in ['–±–ª–æ–∫', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ', '—Ä–∞–∑–¥–µ–ª', '—á–∞—Å—Ç—å'])):
                        continue
                    
                    # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–¥ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
                    if not disc_code.startswith('–ë1.–û.'):
                        continue
                    
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫—Ä–µ–¥–∏—Ç—ã
                    credits = 0.0
                    if credits_col is not None and pd.notna(row[credits_col]):
                        try:
                            credits = float(row[credits_col])
                        except:
                            pass
                    
                    # –ù–∞—Ö–æ–¥–∏–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–π –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã
                    disc_competences = competences_dict.get(disc_code, [])
                    
                    discipline_data = {
                        "code": disc_code,
                        "name": disc_name,
                        "credits": credits,
                        "hours_total": 0,  # –ü–æ–∫–∞ –Ω–µ –Ω–∞—à–ª–∏ —á–∞—Å—ã
                        "competences": disc_competences
                    }
                    
                    disciplines_list.append(discipline_data)
                    print(f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞: {disc_code} - {disc_name} ({credits} –∑.–µ.)")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω: {e}")
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–ª–∞–Ω–µ, –ø—Ä–æ–±—É–µ–º –ü–ª–∞–Ω–°–≤–æ–¥
        if not disciplines_list and '–ü–ª–∞–Ω–°–≤–æ–¥' in sheet_names:
            try:
                plan_df = pd.read_excel(file_path, sheet_name='–ü–ª–∞–Ω–°–≤–æ–¥', header=None)
                print("üîÑ –ü—Ä–æ–±—É–µ–º –ø–∞—Ä—Å–∏—Ç—å –ü–ª–∞–Ω–°–≤–æ–¥...")
                
                # –ê–Ω–∞–ª–æ–≥–∏—á–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ü–ª–∞–Ω–°–≤–æ–¥
                for i in range(3, len(plan_df)):
                    row = plan_df.iloc[i]
                    
                    if row.isna().all():
                        continue
                    
                    disc_code = str(row[1]).strip() if pd.notna(row[1]) else ""
                    disc_name = str(row[2]).strip() if pd.notna(row[2]) else ""
                    
                    if (disc_code.startswith('–ë1.–û.') and disc_name and
                        not any(keyword in disc_code.lower() for keyword in ['–±–ª–æ–∫', '–∏—Ç–æ–≥–æ', '–≤—Å–µ–≥–æ'])):
                        
                        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫—Ä–µ–¥–∏—Ç—ã
                        credits = 0.0
                        if pd.notna(row[7]):  # –°—Ç–æ–ª–±–µ—Ü —Å –∫—Ä–µ–¥–∏—Ç–∞–º–∏
                            try:
                                credits = float(row[7])
                            except:
                                pass
                        
                        disc_competences = competences_dict.get(disc_code, [])
                        
                        discipline_data = {
                            "code": disc_code,
                            "name": disc_name,
                            "credits": credits,
                            "hours_total": 0,
                            "competences": disc_competences
                        }
                        
                        disciplines_list.append(discipline_data)
                        print(f"‚úÖ –î–∏—Å—Ü–∏–ø–ª–∏–Ω–∞ (—Å–≤–æ–¥): {disc_code} - {disc_name}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ü–ª–∞–Ω–°–≤–æ–¥: {e}")
        
        print(f"üìä –ò—Ç–æ–≥: {len(disciplines_list)} –¥–∏—Å—Ü–∏–ø–ª–∏–Ω, {len(competences_dict)} —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–π")
        
        return {
            "source_file": os.path.basename(file_path),
            "disciplines": disciplines_list,
            "competences_mapping": competences_dict
        }
        
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return {"error": str(e), "source_file": os.path.basename(file_path)}

def parse_all_curriculums(data_dir: str = "data", output_dir: str = "data/parsed") -> Dict[str, Any]:
    """–ü–∞—Ä—Å–∏—Ç –≤—Å–µ —Ñ–∞–π–ª—ã —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤"""
    os.makedirs(output_dir, exist_ok=True)
    results = {}
    
    data_path = Path(data_dir)
    excel_files = list(data_path.glob("*.xlsx")) + list(data_path.glob("*.xls"))
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(excel_files)} —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
    
    for file_path in excel_files:
        print(f"\n{'='*60}")
        result = parse_single_curriculum(str(file_path))
        
        if "error" not in result:
            output_file = os.path.join(output_dir, f"{file_path.stem}_parsed.json")
            with open(output_file, 'w', encoding='utf-8') as f:
                json.dump(result, f, ensure_ascii=False, indent=4)
            
            results[file_path.name] = {
                "status": "success",
                "disciplines_count": len(result.get("disciplines", [])),
                "competences_count": len(result.get("competences_mapping", {})),
                "output_file": output_file
            }
            
            print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {len(result.get('disciplines', []))} –¥–∏—Å—Ü–∏–ø–ª–∏–Ω")
        else:
            results[file_path.name] = {
                "status": "error",
                "error": result["error"]
            }
            print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
    
    # –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç
    summary_file = os.path.join(output_dir, "parsing_summary.json")
    with open(summary_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=4)
    
    print(f"\nüéâ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    return results

# –î–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
if __name__ == "__main__":
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
    data_path = Path("data")
    excel_files = list(data_path.glob("*.xlsx")) + list(data_path.glob("*.xls"))
    
    if excel_files:
        test_file = str(excel_files[0])
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–∞—Ä—Å–µ—Ä –Ω–∞ –ø–µ—Ä–≤–æ–º —Ñ–∞–π–ª–µ")
        result = parse_single_curriculum(test_file)
        
        if result.get('disciplines'):
            print(f"\nüìã –ù–∞–π–¥–µ–Ω—ã –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã:")
            for disc in result['disciplines'][:10]:  # –ü–µ—Ä–≤—ã–µ 10
                comps = ", ".join(disc['competences']) if disc['competences'] else "–Ω–µ—Ç"
                print(f"   {disc['code']}: {disc['name']} ({disc['credits']} –∑.–µ.) ‚Üí {comps}")
        else:
            print("‚ùå –î–∏—Å—Ü–∏–ø–ª–∏–Ω—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
    else:
        print("‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")